<?php

/**
 * @file
 * Display a Google Custom Search Engine (CSE) on your site.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function google_cse_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the google_cse module.
    case 'help.page.google_cse':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Use Google Custom Search to search your site and/or any other sites.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Builds a query array based on Google CSE settings.
 *
 * @todo Convert according https://www.drupal.org/node/2083471
 */
function google_cse_build_query($keys, $sitesearch = NULL, $here = TRUE) {
  if (!\Drupal::config('google_cse.settings')->get('use_adv')) {
    return array('query' => $keys);
  }

  return array(
    'query' => $keys,
    'cx' => \Drupal::config('google_cse.settings')->get('cx'),
    'cof' => $here ? \Drupal::config('google_cse.settings')->get('cof_here') : \Drupal::config('google_cse.settings')->get('cof_google'),
    'sitesearch' => isset($sitesearch) ? $sitesearch : google_cse_sitesearch_default(),
  ) + google_cse_advanced_settings();
}

/**
 * Implements hook_search_page().
 */
function google_cse_search_page($results) {

  if (!\Drupal::config('google_cse.settings')->get('use_adv')) {
    $output['#theme'] = 'google_cse_results';

    return $output;
  }
  
  if (!$results) {
    // No results found.
    // @FIXME
// theme() has been renamed to _theme() and should NEVER be called directly.
// Calling _theme() directly can alter the expected output and potentially
// introduce security issues (see https://www.drupal.org/node/2195739). You
// should use renderable arrays instead.
// 
// 
// @see https://www.drupal.org/node/2195739
// $output['search_results'] = array('#markup' => theme('google_cse_search_noresults'));

   
    return $output;
  }

  if (!empty($_GET['page'])) {
    $current_page = $_GET['page'];
    $number_results = t('Results @from to @to of @total matches.', array(
      '@from' => $current_page * 10,
      '@to' => $current_page * 10 + 10,
      '@total' => $GLOBALS['pager_total_items'][0],
    ));
    $output['prefix']['#markup'] = $number_results . '<ol class="search-results">';
  }

  foreach ($results as $entry) {
    $output[] = array(
      '#theme' => 'search_result',
      '#result' => $entry,
      '#module' => 'google_cse',
    );
  }
 
  if (!empty($_GET['page'])) {
    // Important, add the pager.
    // @FIXME
// theme() has been renamed to _theme() and should NEVER be called directly.
// Calling _theme() directly can alter the expected output and potentially
// introduce security issues (see https://www.drupal.org/node/2195739). You
// should use renderable arrays instead.
// 
// 
// @see https://www.drupal.org/node/2195739
// $output['suffix']['#markup'] = '</ol>' . theme('pager');

  }

  return $output;
}

/**
 * Implements hook_theme().
 */
function google_cse_theme($existing, $type, $theme, $path) {
  return array(
    'google_cse_results' => array(
      'variables' => array('form' => FALSE, 'path' => $path),
      'file' => 'google_cse.theme.inc',
      'template' => 'google_cse_results',
    ),
    'google_cse_adv_results' => array(
      'variables' => array('form' => FALSE, 'path' => $path),
      'file' => 'google_cse.theme.inc',
      'template' => 'google_cse_adv/templates/google_cse_adv_results',
    ),
    // Shows a message when the search does not return any result.
    'google_cse_search_noresults' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Return the Google CSE tab title, either a setting or a translation.
 */
function google_cse_results_tab() {
  return ($var = \Drupal::config('google_cse.settings')->get('results_tab')) ? $var : t('Google');
}

/**
 * Returns an array of any advanced settings which have been set.
 */
function google_cse_advanced_settings() {
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $settings = array();
  foreach (array('cr', 'gl', 'hl', 'ie', 'lr', 'oe', 'safe') as $parameter) {
    $settings[$parameter] = \Drupal::config('google_cse.settings')->get('' . $parameter);
  }
  if (\Drupal::config('google_cse.settings')->get('locale_hl')) {
    $settings['hl'] = $language->language;
  }
  if (\Drupal::config('google_cse.settings')->get('locale_lr')) {
    $settings['lr'] = 'lang_' . $language->language;
  }
  return $settings;
}

/**
 * Get the relevant language to use for the search.
 *
 * @return string
 *   The language.
 */
function google_cse_language() {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $config = \Drupal::config('google_cse.settings');
  return $config->get('locale_hl') ? $language : $config->get('hl');
}

/**
 * Returns SiteSearch options form item.
 */
function google_cse_sitesearch_form(&$form) {
  if ($options = google_cse_sitesearch_options()) {
    $form['sitesearch'] = array(
      '#type' => \Drupal::config('google_cse.settings')->get('sitesearch_form'),
      '#options' => $options,
      '#default_value' => google_cse_sitesearch_default(),
    );
    if ($form['sitesearch']['#type'] == 'select' && isset($form['sa'])) {
      $form['sa']['#weight'] = 10;
    }
    $form['#attributes']['class'][] = 'google-cse';
  }
}

/**
 * Returns SiteSearch options.
 */
function google_cse_sitesearch_options() {
  static $options;
  if (!isset($options)) {
    $options = array();
    if ($sites = preg_split('/[\n\r]+/', \Drupal::config('google_cse.settings')->get('sitesearch'), -1, PREG_SPLIT_NO_EMPTY)) {
      $options[''] = ($var = \Drupal::config('google_cse.settings')->get('sitesearch_option')) ? $var : t('Search the web');
      foreach ($sites as $site) {
        $site = preg_split('/[\s]+/', trim($site), 2, PREG_SPLIT_NO_EMPTY);
        // Select options will be HTML-escaped.
        // Radio options will be XSS-filtered.
        $options[$site[0]] = isset($site[1]) ? $site[1] : t('Search %sitesearch', array('%sitesearch' => $site[0]));
      }
    }
  }
  return $options;
}

/**
 * Returns SiteSearch default value.
 */
function google_cse_sitesearch_default() {
  $options = google_cse_sitesearch_options();
  if (isset($_GET['sitesearch']) && isset($options[$_GET['sitesearch']])) {
    return $_GET['sitesearch'];
  }
  elseif (\Drupal::config('google_cse.settings')->get('sitesearch_default')) {
    // Return the key of the second element in the array.
    return key(array_slice($options, 1, 1));
  }
  return '';
}

/**
 * Adds custom submit handler for search form.
 */
function google_cse_form_search_form_alter(&$form, &$form_state, $form_id) {
  google_cse_sitesearch_form($form);
}

/**
 * Adds custom submit handler for search block form.
 */
function google_cse_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  /** @var \Drupal\search\SearchPageRepositoryInterface $repo */
  $repo = \Drupal::service('search.search_page_repository');
  if ($repo->getDefaultSearchPage() == 'google_cse_search_type') {
    $config = \Drupal::config('google_cse.settings'); 
    google_cse_sitesearch_form($form);
    $form['#attached']['library'] = [
      'core/drupalSettings',
      'google_cse/googleCseWatermarkLibrary',
    ];
    $form['#attached']['drupalSettings'] = [
      'googleCSE' => [
        'cx' => $config->get('cx'),
        'language' => google_cse_language(),
        'resultsWidth' => intval($config->get('google_cse_results_width', 600)),
        'domain' => $config->get('google_cse_domain', 'www.google.com'),
      ],
    ];
  }
}


/**
 * Implements hook_proxy_settings_info().
 */
function google_cse_proxy_settings_info() {
  return array(
    'google_cse_adv' => array(
      'name' => 'Google Custom Search Engine',
    ),
  );
}


/**
 * Brief message to display when no results match the query.
 *
 * @see search_help()
 */
function theme_google_cse_search_noresults() {
  return t('<h2>Sorry there were no results matching your enquiry.</h2>
    <ul>
    <li>Check the spelling of your keywords</li>
    <li>Try a more specific enquiry (e.g. <em>"Penny Black"</em> instead of <em>"Stamps"</em>): "blue drop"</em></li>
    <li>Be explicit (e.g. <em>"Second class stamp"</em> instead of <em>"Stamp"</em>)</li>
    <li>Include spaces between keywords</li>
    </ul>');
}
